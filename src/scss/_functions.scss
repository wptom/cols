@use "sass:math";
@use "sass:map";

@use "./variables" as *;

// Basic col-*, pull-*, push-*
@for $breakpoint-value from 1 through $columns {
	.col-#{$breakpoint-value} {
		flex-basis: math.div($breakpoint-value,$columns) * 100%;
	}

	.push-#{$breakpoint-value} {
		margin-left: math.div($breakpoint-value,$columns) * 100%;
	}

	.pull-#{$breakpoint-value} {
		margin-left: math.div($breakpoint-value,$columns) * 100%* -1;
	}
}

// Device based col-*-{device}-up, pull-*-{device}-up, push-*-{device}-up
@each $breakpoint-name, $breakpoint-value in $breakpoints {
	@if $breakpoint-name == "mobile" {
		@media only screen and (min-width: 0px) {
			@for $breakpoint-value from 1 through $columns {
				.col-#{$breakpoint-value} {
					flex-basis: math.div($breakpoint-value,$columns) * 100%;
					margin-right: 0;
					margin-left: 0;
				}

				.col-#{$breakpoint-value}-#{$breakpoint-name}-up {
					flex-basis: math.div($breakpoint-value,$columns) * 100%;
				}
			}
		}
	} @else {
		@media only screen and (min-width: #{$breakpoint-value}px) {
			.container {
				width: #{$breakpoint-value}px;
				max-width: 100%;
			}

			@for $breakpoint-value from 1 through $columns {
				.col-#{$breakpoint-value}-#{$breakpoint-name}-up {
					flex-basis: math.div($breakpoint-value,$columns) * 100%;
				}

				.push-#{$breakpoint-value}-#{$breakpoint-name}-up {
					margin-left: math.div($breakpoint-value,$columns) * 100%;
				}

				.pull-#{$breakpoint-value}-#{$breakpoint-name}-up {
					margin-left: math.div($breakpoint-value,$columns) * 100% * -1;
				}
			}
		}
	}
}
